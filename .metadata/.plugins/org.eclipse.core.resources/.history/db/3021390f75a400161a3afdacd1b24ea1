//=========================================================//
//  FlagTop Multithread Race v.1.0   Nov.2016              //
//  Author: Dr. Adriano Cavalcanti                         //
//  FreeBSD License;                                       //
//=========================================================//
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/time.h>// for windows:: #include <time.h>
//=========================================================//
// only for windows//
//-----------------//
#ifdef __unix__
# include <unistd.h>
#elif defined _WIN32
# include <windows.h>
#define sleep(x) Sleep(1000 * x)
#endif
//=========================================================//
#define N 7
#define RUNNING_THREADS 4
#define BUNNY 0
#define DEVIL 1
#define TWEETY 2
#define MARVIN 3
#define MOUNTAIN 4
#define CARROT1 5
#define CARROT2 6
#define BOARDSIZE 5
//=========================================================//
typedef struct thread {
     pthread_t thread_id;
     int       thread_num,id,pos_x,pos_y;
     int copy_COUNT_GLOBAL;
     char name[15];
     int condition,copy_FINISH_LINE;
     int CARROT;
} ThreadData;
ThreadData thread[N];
ThreadData *winners[2];
pthread_mutex_t toon_signal_mutex;
//=========================================================//
struct table {
    struct coordinate {
        char TOON;
        int SPOT_TAKEN;
    } POS[5];
} BOARD[5] =
    {
        {
                .POS = {{ .TOON = '-', .SPOT_TAKEN = 0 },
                            { .TOON = '-', .SPOT_TAKEN = 0},
                            { .TOON = '-', .SPOT_TAKEN = 0 },
                            { .TOON = '-', .SPOT_TAKEN = 0},
                            { .TOON = '-', .SPOT_TAKEN = 0 }
                         }
            },
        {
                .POS = {{ .TOON = '-', .SPOT_TAKEN = 0 },
                        { .TOON = '-', .SPOT_TAKEN = 0 },
                        { .TOON = '-', .SPOT_TAKEN = 0 },
                        { .TOON = '-', .SPOT_TAKEN = 0 },
                        { .TOON = '-', .SPOT_TAKEN = 0 }
                     }
        },
        {
                .POS = {{ .TOON = '-', .SPOT_TAKEN = 0 },
                        { .TOON = '-', .SPOT_TAKEN = 0 },
                        { .TOON = '-', .SPOT_TAKEN = 0 },
                        { .TOON = '-', .SPOT_TAKEN = 0 },
                        { .TOON = '-', .SPOT_TAKEN = 0 }
                    }
        },

        {
              .POS = {{ .TOON = '-', .SPOT_TAKEN = 0 },
                    { .TOON = '-', .SPOT_TAKEN = 0 },
                    { .TOON = '-', .SPOT_TAKEN = 0 },
                    { .TOON = '-', .SPOT_TAKEN = 0 },
                    { .TOON = '-', .SPOT_TAKEN = 0 }
                   }
        },
        {
              .POS = {{ .TOON = '-', .SPOT_TAKEN = 0 },
                        { .TOON = '-', .SPOT_TAKEN = 0 },
                        { .TOON = '-', .SPOT_TAKEN = 0 },
                        { .TOON = '-', .SPOT_TAKEN = 0 },
                        { .TOON = '-', .SPOT_TAKEN = 0 }
                   }
        }
    };
//=========================================================//
struct mutex_shared{
    int CONDITION_TOON,WHOLE_CYCLE,COUNT_GLOBAL,FROZEN[2],FINISH_LINE;
    char WINNER[15];
    struct DEAD{
        int IS_ALIVE;
        int HAS_CARROT;
    }TOON[RUNNING_THREADS];
}SHARED;
//=========================================================//
int getRandom(int rangeLow, int rangeHigh) {
    double myRand = rand()/(1.0 + RAND_MAX);
    int range = rangeHigh - rangeLow + 1;
    int myRand_scaled = (myRand * range) + rangeLow;
    return myRand_scaled;
}
//=========================================================//
void pick_square(char toon,int process){
    int row,column, not_done=1;
    while(not_done){
        row=getRandom(0,BOARDSIZE-1);
        column=getRandom(0,BOARDSIZE-1);
        if(!BOARD[row].POS[column].SPOT_TAKEN){
            BOARD[row].POS[column].TOON=toon;
            BOARD[row].POS[column].SPOT_TAKEN=1;
            thread[process].pos_x=row;
            thread[process].pos_y=column;
            not_done=0;
        }
    }
}
//=========================================================//
void free_old_spot(int process){
    int old_row,old_column;
    old_row=thread[process].pos_x;
    old_column=thread[process].pos_y;
    BOARD[old_row].POS[old_column].SPOT_TAKEN=0;
    BOARD[old_row].POS[old_column].TOON='-';
}
//=========================================================//
void new_position(int process,int *new_x,int *new_y){
    int moveX,moveY,not_done;
    not_done=1;
	while(not_done){
		moveX=getRandom(0,2)-1;
		(*new_x)=thread[process].pos_x+moveX;
		moveY=getRandom(0,2)-1;
		(*new_y)=thread[process].pos_y+moveY;

		if(!(*new_x<0 || *new_x>BOARDSIZE-1)&&!(*new_y<0 || *new_y>BOARDSIZE-1)){
		    not_done=0;
		}
	}
}
//=========================================================//
void takeover_place(char toon,int process,int new_x,int new_y){
    free_old_spot(process);
    BOARD[new_x].POS[new_y].TOON=toon;
    BOARD[new_x].POS[new_y].SPOT_TAKEN=1;
    thread[process].pos_x=new_x;
    thread[process].pos_y=new_y;
}
//=========================================================//
void pick_square_marvin(char toon, int process, char name[]){
    int not_done,new_x,new_y;
    not_done=1;
    while(not_done){
    	new_position(process, &new_x, &new_y);

        if(!BOARD[new_x].POS[new_y].SPOT_TAKEN){
            takeover_place(toon, process, new_x, new_y);
            not_done=0;
        }else{
            switch(BOARD[new_x].POS[new_y].TOON){
                case 'C':
                    thread[process].CARROT=1;
                    SHARED.TOON[process].HAS_CARROT=thread[process].CARROT;
                    takeover_place(toon, process, new_x, new_y);
                    not_done=0;
                    break;
                case 'F':
                    if(thread[process].CARROT){
                        SHARED.FINISH_LINE=1;
                        strcpy(SHARED.WINNER,name);
                        takeover_place(toon, process, new_x, new_y);
                        not_done=0;
                    }
                    break;
                case 'B':
                    SHARED.TOON[BUNNY].IS_ALIVE=0;
                    if(SHARED.TOON[BUNNY].HAS_CARROT){
                        thread[process].CARROT=1;
                    }
                    takeover_place(toon, process, new_x, new_y);
                    not_done=0;
                    break;
                case 'D':
                    SHARED.TOON[DEVIL].IS_ALIVE=0;
                    if(SHARED.TOON[DEVIL].HAS_CARROT){
                        thread[process].CARROT=1;
                    }
                    takeover_place(toon, process, new_x, new_y);
                    not_done=0;
                    break;
                case 'T':
                    SHARED.TOON[TWEETY].IS_ALIVE=0;
                    if(SHARED.TOON[TWEETY].HAS_CARROT){
                        thread[process].CARROT=1;
                    }
                    takeover_place(toon, process, new_x, new_y);
                    not_done=0;
                    break;
            }
        }
    }
}
//=========================================================//
void change_mountain(char toon_letter,int process){
    int not_done,new_x,new_y;
    not_done=1;
    while(not_done){
    	new_position(process, &new_x, &new_y);

        if(!BOARD[new_x].POS[new_y].SPOT_TAKEN){
            takeover_place(toon_letter, process, new_x, new_y);
            not_done=0;
        }
    }
}
//=========================================================//
void pick_square_tooneys(char toon_letter,int process,char name[]){
    int not_done,new_x,new_y;
    not_done=1;
    while(not_done){
    	new_position(process, &new_x, &new_y);

        if(!BOARD[new_x].POS[new_y].SPOT_TAKEN){
            takeover_place(toon_letter, process, new_x, new_y);
            not_done=0;
        }else{
            switch(BOARD[new_x].POS[new_y].TOON){
                case 'C':
                    thread[process].CARROT=1;
                    SHARED.TOON[process].HAS_CARROT=thread[process].CARROT;
                    takeover_place(toon_letter, process, new_x, new_y);
                    not_done=0;
                    break;
                case 'F':
                    if(thread[process].CARROT){
                        SHARED.FINISH_LINE=1;
                        strcpy(SHARED.WINNER,name);
                        takeover_place(toon_letter, process, new_x, new_y);
                        not_done=0;
                    }
                    break;
            }
        }
    }
}
//=========================================================//
void walking_marving(ThreadData *toon){
    SHARED.WHOLE_CYCLE++;
    if(SHARED.WHOLE_CYCLE%3 == 0 && !SHARED.FINISH_LINE){
        change_mountain('F',MOUNTAIN);
    }
    pick_square_marvin('M', toon->id, toon->name);
    printboard();
}
//=========================================================//
void walking_tooneys(ThreadData *toon){
    char toon_letter=toon->name[0];
    pick_square_tooneys(toon_letter, toon->id, toon->name);
    printboard();
}
//=========================================================//
void toon_signal(ThreadData *toon){

   static int finishCount = 0;
   pthread_mutex_lock(&toon_signal_mutex);
        if(SHARED.CONDITION_TOON==toon->condition){
            SHARED.CONDITION_TOON=toon->id;

            if(!SHARED.FINISH_LINE){
                if(strcmp(toon->name,"Marvin") == 0){
                    printf("\t-----------------------------------\n");
                    walking_marving(toon);
                }else{
                    if(SHARED.TOON[toon->id].IS_ALIVE){
                        printf("\t-----------------------------------\n");
                        walking_tooneys(toon);
                    }
                }
            }else{

            	winners[finishCount] = toon;
            	finishCount ++;

            	if(finishCount == 2){
            		toon->copy_FINISH_LINE=SHARED.FINISH_LINE=1;
            	}else{

            		changeMountain('F', MOUNTAIN);
            	}
                printf("\n WINNER = %s\n",SHARED.WINNER);
            }

            SHARED.COUNT_GLOBAL++;
            toon->copy_COUNT_GLOBAL=SHARED.COUNT_GLOBAL;
        }
    pthread_mutex_unlock(&toon_signal_mutex);
}
//=========================================================//
void setup_time_seed(){
	struct timeval time;
	gettimeofday(&time, NULL);
	#ifdef _WIN64
	   srand((unsigned int) time.tv_usec);
	#elif _WIN32
	   srand((unsigned int) time.tv_usec);
	#elif __linux
	   srandom((unsigned int) time.tv_usec);
	#elif __unix
	   srandom((unsigned int) time.tv_usec);
	#elif __posix
	   srandom((unsigned int) time.tv_usec);
	#endif
}
//=========================================================//
void *run_API(void *thread)
{  ThreadData *toon  = (ThreadData*)thread;
   setup_time_seed();
   while(!toon->copy_FINISH_LINE){
        toon_signal(toon);
        sleep(2);
   }
   pthread_exit(NULL);
}
//=========================================================//
void printboard(){
    int row,column;
    char cartoon;
    for(row=0;row<BOARDSIZE; row++){
        printf("\t");
        for(column=0;column<BOARDSIZE;column++){
            switch(BOARD[row].POS[column].TOON){
                case 'B':
                    cartoon=BUNNY;
                    if(thread[cartoon].pos_x==row && thread[cartoon].pos_y==column && thread[cartoon].CARROT){
                        printf("%c(C)\t",BOARD[row].POS[column].TOON);
                    }else{
                        printf("%c\t",BOARD[row].POS[column].TOON);
                    }
                    break;
                case 'D':
                    cartoon=DEVIL;
                    if(thread[cartoon].pos_x==row && thread[cartoon].pos_y==column && thread[cartoon].CARROT){
                        printf("%c(C)\t",BOARD[row].POS[column].TOON);
                    }else{
                        printf("%c\t",BOARD[row].POS[column].TOON);
                    }
                    break;
                case 'T':
                    cartoon=TWEETY;
                    if(thread[cartoon].pos_x==row && thread[cartoon].pos_y==column && thread[cartoon].CARROT){
                        printf("%c(C)\t",BOARD[row].POS[column].TOON);
                    }else{
                        printf("%c\t",BOARD[row].POS[column].TOON);
                    }
                    break;
                case 'M':
                    cartoon=MARVIN;
                    if(thread[cartoon].pos_x==row && thread[cartoon].pos_y==column && thread[cartoon].CARROT){
                        printf("%c(C)\t",BOARD[row].POS[column].TOON);
                    }else{
                        printf("%c\t",BOARD[row].POS[column].TOON);
                    }
                    break;

                default:
                    printf("%c\t",BOARD[row].POS[column].TOON);
                }
        }
        printf("\n");
    }
}
//=========================================================//
void create_objects(void){
    pick_square('B',BUNNY);
    pick_square('D',DEVIL);
    pick_square('T',TWEETY);
    pick_square('M',MARVIN);
    pick_square('F',MOUNTAIN);
    pick_square('C',CARROT1);
    pick_square('C',CARROT2);
}
//=========================================================//
void init_data(ThreadData *toon){
	int i;
    SHARED.WHOLE_CYCLE=0;
    SHARED.COUNT_GLOBAL=0;
    SHARED.CONDITION_TOON=3;
    SHARED.FINISH_LINE=0;
    for(i=0;i<RUNNING_THREADS;i++){
        SHARED.TOON[i].IS_ALIVE=1;
        SHARED.TOON[i].HAS_CARROT=0;
    }
    create_objects();
    printf("\t-----------------------------------\n");
    printboard();

    toon[0].id=0;
    toon[0].condition=3;
    toon[0].CARROT=0;
    toon[0].copy_COUNT_GLOBAL=SHARED.COUNT_GLOBAL;
    toon[0].copy_FINISH_LINE=SHARED.FINISH_LINE;
    strcpy(toon[0].name, "Bunny");

    toon[1].id=1;
    toon[1].condition=0;
    toon[1].CARROT=0;
    toon[1].copy_COUNT_GLOBAL=SHARED.COUNT_GLOBAL;
    toon[1].copy_FINISH_LINE=SHARED.FINISH_LINE;
    strcpy(toon[1].name, "Devil");

    toon[2].id=2;
    toon[2].condition=1;
    toon[2].CARROT=0;
    toon[2].copy_COUNT_GLOBAL=SHARED.COUNT_GLOBAL;
    toon[2].copy_FINISH_LINE=SHARED.FINISH_LINE;
    strcpy(toon[2].name, "Tweety");

    toon[3].id=3;
    toon[3].condition=2;
    toon[3].CARROT=0;
    toon[3].copy_COUNT_GLOBAL=SHARED.COUNT_GLOBAL;
    toon[3].copy_FINISH_LINE=SHARED.FINISH_LINE;
    strcpy(toon[3].name, "Marvin");
}
//=========================================================//
int main(int argc, char *argv[])
{  int i;
   init_data(thread);
   pthread_mutex_init(&toon_signal_mutex, NULL);
       for(i=0; i<RUNNING_THREADS; i++){
          thread[i].thread_num=i;
          pthread_create(&(thread[i].thread_id), NULL, run_API, (void *)(&thread[i]));
       }
       for (i = 0; i < N; i++){
           pthread_join(thread[i].thread_id, NULL);
       }
   pthread_mutex_destroy(&toon_signal_mutex);
   printf("winners are %s and %s\n",winners[0]->name, winners[1]->name);

   return 0;
}
//=========================================================//

