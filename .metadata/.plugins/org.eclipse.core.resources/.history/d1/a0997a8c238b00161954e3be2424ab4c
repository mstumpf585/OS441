
package basic;
import java.io.*;
import java.net.*;
import java.util.*;



final class HttpRequest implements Runnable {
	final static String CRLF = "\r\n";
	Socket socket;

	// Constructor
	public HttpRequest(Socket socket) throws Exception {
		this.socket = socket;
	}

	// Implement the run() method of the Runnable interface.
	public void run() {
		try {
			processRequest();
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	private void processRequest() throws Exception
	{
		InputStream is = this.socket.getInputStream();
		DataOutputStream os = new DataOutputStream(this.socket.getOutputStream());
		
		BufferedReader br = new BufferedReader(new InputStreamReader(is));
		
		String requestLine = br.readLine(); 
		System.out.println(); 
		System.out.println(requestLine);
		
		String headerLine = null;
		while((headerLine = br.readLine()).length() != 0){
			System.out.print(headerLine); 
		}
		
		StringTokenizer tokens = new StringTokenizer(requestLine);
		tokens.nextToken();
		String fileName = tokens.nextToken();
		
		fileName = "." + fileName;
		
		//open requested file
		FileInputStream fis = null;
		boolean fileExists = true;
		try{
			fis = new FileInputStream(fileName);
		}catch (FileNotFoundException e){
			fileExists = false;
		}
		
		//construct response
		String statusLine = null;
		String contentTypeLine = null;
		String entityBody = null;
		
		
		if (fileExists) {
			statusLine = "HTTP/1.1 200 OK" + CRLF;
			contentTypeLine = "Content-type: " + contentType(fileName) + CRLF;
		} else {
				statusLine = "HTTP/1.1 404 Not Found" + CRLF;
				contentTypeLine = CRLF ;
				entityBody = "<html>" +
				"<head><title>Not Found</title></head>" + "<body>404 File Not Found</body></html>";
		}
		
		// send the status line
		os.writeBytes(statusLine);
		
		//send the content type line.
		os.writeBytes(contentTypeLine);
		
		//send a blank line to indicate the end of the header lines.
		os.writeBytes(CRLF);
		
		// send entity body
		if (fileExists){
			sendBytes(fis, os);
			fis.close();
		}else {
			os.writeBytes(entityBody);
		}
		
	
		br.close();
		is.close();
		os.close();
	}
	
	
	private static void sendBytes(FileInputStream fis, OutputStream os)
	throws Exception
	{
		
		//construct 1k buffer to hold bytes on their way to the socket
		byte[] buffer = new byte[1024];
		int bytes = 0;
		
		//copy requested file into the socket's output stream
		while((bytes = fis.read(buffer)) != -1){
			os.write(buffer, 0, bytes);
		}
	}
	private static String contentType(String fileName){
		
		if (fileName.endsWith(".htm") || fileName.endsWith(".html")){
			return "text/html";
			
		}
		if (fileName.endsWith(".jpeg") || fileName.endsWith(".jpg")){
			return "image/jpeg";
			
		}
		if (fileName.endsWith(".gif")){
			return "image/gif";
			
		}
		return "application/octet-stream";
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
}